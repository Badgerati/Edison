{"name":"Edison","tagline":"Edison is an open source unit/integration test framework for .NET","body":"Edison\r\n======\r\n\r\nEdison is designed to be a more performant unit/integration testing framework for .NET projects.\r\nMany features, such as Attributes, are similar to NUnit for a more fluid transition.\r\n\r\n\r\nLicense\r\n=======\r\n\r\nEdison is completely open sourced and free under the MIT License.\r\n\r\n\r\nUsage\r\n=====\r\n\r\nFramework\r\n---------\r\n\r\nUsing Edison is very similar to NUnit. You have a [Test] Attribute with varying other Attributes to create your tests. An example would be:\r\n\r\n```C#\r\n[TestFixture]\r\npublic class TestClass\r\n{\r\n\t[Setup]\r\n\tpublic void Setup()\r\n\t{\r\n\t\t//stuff\r\n\t}\r\n\r\n\t[Teardown]\r\n\tpublic void Teardown(TestResult result)\r\n\t{\r\n\t\t//stuff\r\n\t}\r\n\r\n\t[Test]\r\n\t[Category(\"Name\")]\r\n\t[TestCase(1)]\r\n\t[TestCase(2)]\r\n\tpublic void Test(int value)\r\n\t{\r\n\t\tAssertFactory.Instance.AreEqual(2, value, \"Argh no it's an error!!!1\");\r\n\t}\r\n}\r\n```\r\n\r\nHere you can see that this is mostly very similar to NUnit. Edison has been designed this way to make it easier for people to transition over.\r\n\r\nIn the example above we have:\r\n* A `TestFixture` which contains multiple `Test`s to be run\r\n* A `Setup` method which is run before each `Test`\r\n* A `Teardown` method which is run after each `Test`. This can optionally take a TestResult object.\r\n* And one `Test` method, which has a `Category` of \"Name\", and two possible `TestCase`s to run the Test with as 1 and 2.\r\n\r\nFurthermore, there's the Asserts class. In Edison the main `Assert` class implements the `IAssert` interface. To use the `Assert` class you can either create an instance of it for each Test, or you can use the `AssertFactory` class.\r\nThe `AssertFactory` class contains a lazy Instance property which returns the `IAssert` class being used for the test assembly. This means you can create your own `CustomAssert` class that inherits `IAssert` and do `AssertFactory.Instance = new CustomAssert()` and any calls to `AssertFactory.Instance` will return your `CustomAssert`. This makes it far simpler to have your own assert logic in your test framework. If you don't set the `AssertFactory.Instance` then this is default to be the inbuilt `Assert` logic.\r\n\r\n\r\nConsole and Engine\r\n------------------\r\n\r\nEdison has the inbuilt functionality to run tests in parallel threads. By default tests are run in a single thread however, by suppling the `-t <value>` parameter from the command-line the tests will be run in that many threads. If you supply a number of threads that exceeds the number of TestFixtures, then the number of threads will become the number of TestFixtures.\r\n\r\nEdison has the following flow when running tests per assembly:\r\n\r\n```\r\nSetupFixture -> Setup\r\n |\r\nTestFixture -> TestFixtureSetup\r\n |\r\nTestFixture -> Setup\r\n |\r\nTestFixture -> Test with TestCases\r\n |\r\nTestFixture -> Teardown\r\n |\r\nTestFixture -> TestFixtureTeardown\r\n |\r\nSetupFixture -> Teardown\r\n```\r\n\r\nExample of running a test assembly from the command-line:\r\n\r\n```bash\r\n.\\Edison.Console.exe -a path/to/test/assembly.dll -t 2 -ot json\r\n```\r\n\r\nThis will run the tests across two threads (-t) from the assembly.dll file (-a). The results of the tests will be output to the working directory in json format (-ot).\r\n\r\nDo you have your own in-house test history storage? You can post the test results from Edison.Console to a given URL. Also you can specify a Test Run ID to help uniquely identify the run the results came from:\r\n\r\n```bash\r\n.\\Edison.Console.exe -a path/to/test/assembly.dll -t 2 -dfo true -dco true -ot json -url http://someurl.com -tid 702\r\n```\r\n\r\nAgain this will run the tests across two threads however, this time we won't be creating an output file (-dfo) or outputting the results to the console (-dco). Instead, the results will be posted to the passed URL (-url) and also use the test run ID specified (-tid).\r\n\r\nTo see more parameters use:\r\n\r\n```bash\r\n.\\Edison.Console.exe -help\r\n```\r\n\r\n\r\nBuilding the Solution\r\n---------------------\r\n\r\nUntil I get around to making an installer for Edison, you can open up the Edison.sln file in Visual Studio and build the projects (with Edison.Console set as default).\r\nThis will generate the Edison.Console executable and the Edison.Framework library for usage in your test framework.\r\n\r\n\r\nFeatures\r\n========\r\n\r\n* Framework with Attributes and Assert class for writing unit/integration tests.\r\n* Console application from which to run your tests - with useful inputs like TestResultURL to send results.\r\n* GUI for a more visual look on running tests.\r\n\r\n\r\nTo Do\r\n=====\r\n\r\n* Website with service for automatically running tests\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}